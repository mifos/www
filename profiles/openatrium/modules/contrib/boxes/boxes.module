<?php
// $Id: boxes.module,v 1.10.2.6 2010/06/22 15:17:05 jmiccolis Exp $

/**
 * Implementation of hook_menu().
 */
function boxes_menu() {
  $items = array();
  ctools_include('plugins');
  $plugins = ctools_get_plugins('boxes', 'plugins');
  foreach ($plugins as $key => $info) {
    if (isset($info['title'])) {
      $items['admin/build/block/box-add/'. $key] = array(
        'title' => 'Add '. strtolower($info['title']),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('boxes_add_form', 4),
        'access arguments' => array('administer blocks'),
        'type' => MENU_LOCAL_TASK,
        'file' => 'boxes.admin.inc',
      );
    }
  }
  $items['admin/build/block/configure/boxes/%boxes/delete'] = array(
    'title' => 'Delete box',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('boxes_delete_form', 5),
    'access arguments' => array('administer blocks'),
    'type' => MENU_CALLBACK,
    'file' => 'boxes.admin.inc',   
  );
  $items['boxes/ajax-submit'] = array(
    'page callback' => 'boxes_box_ajax_submit',
    'access callback' => 'boxes_access_admin',
    'type' => MENU_CALLBACK,
    'file' => 'boxes.admin.inc',
  );
  $items['boxes/ajax-delete'] = array(
    'page callback' => 'boxes_box_ajax_delete',
    'access callback' => 'boxes_access_admin',
    'type' => MENU_CALLBACK,
    'file' => 'boxes.admin.inc',
  );
  return $items;
}

/**
 * Access check for whether current user should be able to administer boxes.
 */
function boxes_access_admin() {
  return user_access('administer blocks') || (module_exists('spaces') && spaces_access_admin());
}

/**
 * Implementation of hook_theme().
 */
function boxes_theme($existing, $type, $theme, $path) {
  return array(
    'boxes_box_inline_form' => array(
      'arguments' => array('form' => NULL),
      'path' => drupal_get_path('module', 'boxes'),
      'file' => 'boxes.admin.inc',
    ),
    'boxes_script_placeholder' => array(
      'arguments' => array('text' => NULL),
      'path' => drupal_get_path('module', 'boxes'),
      'file' => 'boxes.admin.inc',
    ),
  );
}

/**
 * Implementation of hook_forms().
 *
 * There can be multiple versions of the same form on a page so we use a
 * different form id for each.
 */
function boxes_forms($form_id) {
  $forms = array();
  if (strpos($form_id, 'boxes_box_inline_form_') === 0) {
    $forms[$form_id] = array(
      'callback' => 'boxes_box_inline_form',
    );
  }
  return $forms;

}

/**
 * Implementation of hook_block().
 */
function boxes_block($op = 'list', $delta = '', $edit = array()) {
  switch ($op) {
    case 'list':
      $boxes = boxes_load();
      $blocks = array();
      foreach ($boxes as $box) {
        $blocks[$box->delta]['info'] = $box->description;
        // Not worth caching.
        $blocks[$box->delta]['cache'] = BLOCK_NO_CACHE;
      }

      // 'add' blocks for editing a page inline
      ctools_include('plugins');
      $plugins = ctools_get_plugins('boxes', 'plugins');
      foreach ($plugins as $key => $info) {
        if (isset($info['title'])) {
          $blocks["add__$key"]['info'] = t('Add custom !title', array('!title' => strtolower($info['title'])));
          $blocks["add__$key"]['cache'] = BLOCK_NO_CACHE;
        }
      }
      return $blocks;

    case 'configure':
      if ($delta && strpos($delta, 'add__') !== 0) {
        if ($box = boxes_load($delta)) {
          if ($box->options_form()) {
            return boxes_box_form($box);
          }
        }
      }
      break;

    case 'save':
      $edit['delta'] = $delta;
      $box = boxes_create($edit['plugin_key'], $edit);
      $box->save();
      break;

    case 'view':
      // Add boxes JS.
      boxes_add_js();

      ctools_include('export');

      // If the 'add' box was requested, replace the delta with a unique delta.
      if (strpos($delta, 'add__') === 0) {
        $plugin_key = str_replace('add__', '', $delta);
        // Increment {$identifier}-$i until there is a free delta.
        $identifier = (module_exists('spaces') && $space = spaces_get_space()) ? "{$space->type}-{$space->id}" : 'box';
        $boxes = boxes_block('list');
        $hash = dechex(crc32($user->sid . microtime()));
        while (isset($boxes["{$identifier}-{$hash}"])) {
          $hash = dechex(crc32($user->sid . microtime()));
        }
        $delta = "{$identifier}-{$hash}";
        $box = boxes_create($plugin_key, array('delta' => $delta));
      }
      else {
        $box = boxes_load($delta);
      }
      drupal_alter('boxes_view', $box, $delta);

      if ($box) {
        // Generate content and provide an editing form if user has proper
        // permissions.
        $block = $box->render();

        // If we are in the middle of an AJAX request, it's likely the block
        // is about to get dynamically inserted into the DOM. Ensure that there
        // are no script tags present (we'll use a placeholder instead) that
        // may trigger a rather unwieldy jQuery bug:
        // http://stackoverflow.com/questions/318336/moving-a-dom-element-containing-a-dynamically-created-script-tag
        $headers = drupal_get_headers();
        $formats = array('xml', 'javascript', 'json');
        foreach ($formats as $format) {
          if (strpos($headers, $format) !== FALSE) {
            if (stripos($block['content'], '<script') !== FALSE) {
              $list = module_invoke('boxes', 'block', 'list');
              $text = !empty($list[$box->delta]['info']) ? $list[$box->delta]['info'] : t('Untitled');
              $block['content'] = theme('boxes_script_placeholder', $text);
            }
            break;
          }
        }

        if (boxes_access_admin() && $box->options_form()) {
          module_load_include('inc', 'boxes', 'boxes.admin');

          // If we are in the middle of processing this very form (e.g. during
          // an AJAX callback to regenerate the block). Use a new form ID.
          $form_id = "boxes_box_inline_form_{$delta}";
          if (isset($_POST['form_id']) && $_POST['form_id'] === $form_id) {
            $form_id .= time();
          }
          $block['content'] = drupal_get_form($form_id, $box, $block);
        }
        // Avoid that block module overrides title and set both subject and title.
        $block['title'] = $block['subject'];
        return $block;
      }
      break;
  }
}

/**
 * Instantiate box object.
 *
 * @param $plugin_key
 *   The string id of the boxes plugin.
 * @param $values
 *   The values to set on the box.
 *
 * @return a box object.
 */
function boxes_create($plugin_key, $values = array()) {
  module_load_include('inc', 'boxes', 'plugins/boxes_box');
  return boxes_box::factory($plugin_key, $values);
}

/**
 * Loader for boxes.
 */
function boxes_load($delta = NULL) {
  module_load_include('inc', 'boxes', 'plugins/boxes_box');
  if (isset($delta)) {
    return boxes_box::load($delta);
  }
  ctools_include('export');
  $boxes = array();
  foreach (ctools_export_load_object('box') as $box) {
    $boxes[$box->delta] = boxes_box::load($box->delta);
  }
  return $boxes;
}

/**
 * Reset boxes load caches.
 */
function boxes_load_reset() {
  boxes_box::reset();
}

/**
 * Common element of the box fom
 */
function boxes_box_form($box) {
  $form = array();
  // For hook_block('save').
  $form['plugin_key'] = array(
    '#type' => 'value',
    '#value' => $box->plugin_key,
  );
  $form['delta'] = array(
    '#type' => 'value',
    '#value' => $box->delta,
  );
  $form['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Box description'),
    '#default_value' => $box->description,
    '#maxlength' => 64,
    '#description' => t('A brief description of your box.'),
    '#required' => TRUE,
    '#weight' => -19,
  );
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Block title'),
    '#maxlength' => 64,
    '#description' => t('The title of the block as shown to the user.'),
    '#default_value' => $box->title,
    '#weight' => -18,
  );
  $form['options'] = $box->options_form();
  $form['options']['#weight'] = -17;
  return $form;
}

/**
 * Implementation of hook_form_alter for block_admin_configure.
 */
function boxes_form_block_admin_configure_alter(&$form, &$form_state) {
  if ($form['module']['#value'] == 'boxes') {
    $box = boxes_load($form['delta']['#value']);
    if (($box->export_type & EXPORT_IN_DATABASE) && ($box->export_type & EXPORT_IN_CODE)) {
      $form['revert'] = array(
        '#type' => 'submit',
        '#value' => t('Revert'),
        '#submit' => array('boxes_block_delete_submit'),
      );
    }
    elseif (!($box->export_type & EXPORT_IN_CODE)) {
      $form['delete'] = array(
        '#type' => 'submit',
        '#value' => t('Delete'),
        '#submit' => array('boxes_block_delete_submit'),
      );
    }
  }
}

// Submit handler for box deletion.
function boxes_block_delete_submit($form, &$form_state) {
  drupal_goto('admin/build/block/configure/boxes/'. $form_state['values']['delta'] .'/delete');
}

/**
 * Alters the block admin form to add delete links next to boxes blocks.
 */
function boxes_form_block_admin_display_form_alter(&$form, $form_state) {
  foreach (element_children($form) as $i) {
    if ($form[$i]['module']['#value'] == 'boxes') {
      $delta = $form[$i]['delta']['#value'];
      if (strpos($delta, 'add__') !== 0) {
        $box = boxes_load($delta);
        if (($box->export_type & EXPORT_IN_DATABASE) && ($box->export_type & EXPORT_IN_CODE)) {
          $form[$i]['delete'] = array(
            '#value' => l(t('revert'), 'admin/build/block/configure/boxes/'. $delta .'/delete'),
          );
        }
        elseif (!($box->export_type & EXPORT_IN_CODE)) {
          $form[$i]['delete'] = array(
            '#value' => l(t('delete'), 'admin/build/block/configure/boxes/'. $delta .'/delete'),
          );
        }
      }
    }
  }
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function boxes_ctools_plugin_api($module, $api) {
  if ($module == 'spaces' && $api == 'plugins') {
    return array('version' => 3);
  }
  elseif ($module == 'boxes' && $api == 'plugins') {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_ctools_plugin_plugins().
 */
function boxes_ctools_plugin_plugins() {
  return array(
    'cache' => TRUE,
    'use hooks' => TRUE,
  );
}

/**
 * Implementation of hook_boxes_plugins().
 */
function boxes_boxes_plugins() {
  $info = array();
  $path = drupal_get_path('module', 'boxes') .'/plugins';
  $info['box'] = array(
    'handler' => array(
      'class' => 'boxes_box',
      'file' => 'boxes_box.inc',
      'path' => $path,
    ),
  );
  $info['simple'] = array(
    'title' => 'Box',
    'handler' => array(
      'parent' => 'box',
      'class' => 'boxes_simple',
      'file' => 'boxes_simple.inc',
      'path' => $path,
    ),
  );
  return $info;
}

/**
 * Implementation of hook_spaces_plugins
 */
function boxes_spaces_plugins() {
  $plugins = array();
  $plugins['spaces_controller_boxes'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'boxes') .'/plugins',
      'file' => 'spaces_controller_boxes.inc',
      'class' => 'spaces_controller_boxes',
      'parent' => 'spaces_controler',
    ),
  );
  return $plugins;
}

/**
 * Implementation of hook_spaces_registry().
 */
function boxes_spaces_registry() {
  return array(
    'controllers' => array(
      'boxes' => array(
        'title' => t('Boxes'),
        'plugin' => 'spaces_controller_boxes',
      ),
    ),
  );
}

/**
 * Implementation of hook_spaces_dashboard_block_access_alter().
 *
 * Provides access to blocks specific to each space.
 */
function boxes_spaces_dashboard_block_access_alter(&$access) {
  foreach (array_keys($access) as $bid) {
    list($module, $delta) = explode('-', $bid, 2);
    if ($module === 'boxes') {
      // This is the add block, give access to admins.
      if (strpos($delta, 'add__') === 0) {
        $access[$bid] = boxes_access_admin();
      }
      // If this box is specific to the current space, allow access.
      else if (module_exists('spaces') && $space = spaces_get_space()) {
        $in_space = $space->controllers->boxes->get($delta, 'space');
        $access[$bid] = $access[$bid] || !empty($in_space);
      }
      // Outside of spaces, give admins access to all boxes.
      else {
        $access[$bid] = boxes_access_admin();
      }
    }
  }
}

/**
 * Implementation of hook_context_block_info_alter().
 *
 * Provides spaces integration when working with blocks using context.
 */
function boxes_context_block_info_alter(&$blocks) {
  // Add boxes JS. If this is getting called, it's highly likely a context
  // inline editor is on the page.
  boxes_add_js();

  if (module_exists('spaces') && $space = spaces_get_space()) {
    $item = menu_get_item();
    // Prevent space-specific blocks from appearing on the dashboard settings
    // page within a space.
    if (!(isset($item['page_callback'], $item['page_arguments'][0]) && $item['page_callback'] === 'drupal_get_form' && $item['page_arguments'][0] === 'spaces_dashboard_admin_form')) {
      foreach ($space->controllers->boxes->get() as $box) {
        $add = new stdClass();
        $add->bid = "boxes-{$box->delta}";
        $add->info = $box->description;
        $add->cache = BLOCK_NO_CACHE;
        $add->module = 'boxes';
        $blocks[$add->bid] = $add;
      }
    }
  }
}

/**
 * Implementation of hook_boxes_view_alter().
 *
 * Provides spaces integration for per-space overrides of a given box.
 */
function boxes_boxes_view_alter(&$box, $delta) {
  if (module_exists('spaces') && $space = spaces_get_space()) {
    if ($space_box = $space->controllers->boxes->get($delta)) {
      // Some older overrides may be stored as an array, check for these and
      // convert them to objects.
      if (is_array($space_box)) {
        $space_box = (object)$space_box;
      }
      $box = boxes_create($space_box->plugin_key, $space_box);
      $box->new = FALSE;
    }
  }
}

/**
 * Wrapper function for adding all the boxes JS components.
 */
function boxes_add_js() {
  static $add_js;
  if (!$add_js && boxes_access_admin()) {
    drupal_add_js('misc/ahah.js');
    drupal_add_js('misc/jquery.form.js');
    drupal_add_js(drupal_get_path('module', 'boxes') . '/boxes.js');
    drupal_add_js(array('boxes' => array('ajaxSubmit' => url('boxes/ajax-submit'), 'ajaxDelete' => url('boxes/ajax-delete'))), 'setting');
    drupal_add_css(drupal_get_path('module', 'boxes') . '/boxes.css');
    $add_js = true;
  }
}
