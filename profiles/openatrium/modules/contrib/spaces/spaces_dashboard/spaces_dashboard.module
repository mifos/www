<?php
// $Id: spaces_dashboard.module,v 1.15.2.25 2010/05/25 20:43:53 yhahn Exp $

include_once('spaces_dashboard.features.inc');

/**
 * Implementation of hook_theme()
 */
function spaces_dashboard_theme() {
  $items = array();
  $items['spaces_dashboard_admin_form'] = array(
    'arguments' => array('form' => array()),
    'file' => 'spaces_dashboard.admin.inc',
    'path' => drupal_get_path('module', 'spaces_dashboard'),
  );
  $items['spaces_dashboard_admin_region_form'] = array(
    'arguments' => array('form' => array()),
    'file' => 'spaces_dashboard.admin.inc',
    'path' => drupal_get_path('module', 'spaces_dashboard'),
  );
  return $items;
}

/**
 * Implementation of hook_menu()
 */
function spaces_dashboard_menu() {
  $items = array();
  $items['dashboard'] = array(
    'title' => 'Dashboard',
    'menu_name' => 'features',
    'page callback' => 'spaces_dashboard_page',
    'page arguments' => array('custom-1'),
    'access callback' => 'spaces_dashboard_access',
    'access arguments' => array('custom-1'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['user/%user/dashboard'] = array(
    'title' => 'Dashboard',
    'page callback' => 'spaces_dashboard_page',
    'page arguments' => array('custom-1'),
    'access callback' => 'spaces_dashboard_user_access',
    'access arguments' => array(1, 'custom-1'),
    'type' => MENU_LOCAL_TASK,
  );
  for ($i = 1; $i < 6; $i++) {
    $items["dashboard/custom-{$i}"] = array(
      'title' => 'Dashboard',
      'title callback' => 'spaces_dashboard_title',
      'title arguments' => array("custom-{$i}"),
      'page callback' => 'spaces_dashboard_page',
      'page arguments' => array("custom-{$i}"),
      'access callback' => 'spaces_dashboard_access',
      'access arguments' => array("custom-{$i}"),
      'type' => MENU_LOCAL_TASK,
      'weight' => $i,
    );
    $items["user/%user/dashboard/custom-{$i}"] = array(
      'title' => 'Dashboard',
      'title callback' => 'spaces_dashboard_title',
      'title arguments' => array("custom-{$i}"),
      'page callback' => 'spaces_dashboard_page',
      'page arguments' => array("custom-{$i}"),
      'access callback' => 'spaces_dashboard_user_access',
      'access arguments' => array(1, "custom-{$i}"),
      'type' => MENU_LOCAL_TASK,
      'weight' => $i,
    );
  }
  $items['dashboard/custom-1']['type'] = MENU_DEFAULT_LOCAL_TASK;

  $items['user/%user/dashboard/add'] =
  $items['dashboard/add'] = array(
    'title' => 'Add custom',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spaces_dashboard_add'),
    'access callback' => 'spaces_access_admin',
    'access arguments' => array(),
    'type' => MENU_LOCAL_TASK,
    'weight' => 100,
    'file' => 'spaces_dashboard.admin.inc',
  );

  $items['features/spaces_dashboard'] =
  $items['admin/settings/dashboard'] = array(
    'title' => 'Dashboard settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spaces_dashboard_admin_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'spaces_dashboard.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['features/spaces_dashboard']['title'] = 'Settings';
  $items['features/spaces_dashboard/block'] =
  $items['admin/settings/dashboard/blocks'] = array(
    'title' => 'Block settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['features/spaces_dashboard/regions'] =
  $items['admin/settings/dashboard/regions'] = array(
    'title' => 'Region settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spaces_dashboard_admin_region_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'spaces_dashboard.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Menu title callback.
 */
function spaces_dashboard_title($dashboard = NULL) {
  $custom = variable_get('spaces_dashboard_custom', array('custom-1' => t('Dashboard')));
  return isset($dashboard) && !empty($custom[$dashboard]) ? $custom[$dashboard] : t('Dashboard');
}

/**
 * Menu access callback.
 *
 * Because spaces_dashboard provides a speciality callback for the user space
 * which can be visible at the same time as the normal callback we need a
 * slightly more complex access check for the main callback.
 *
 * @param $dashboard
 *   String identifier for the dashboard page to check access on.
 * @param $type
 *   The type of dashboard, either 'user' or null
 * @param $op
 *   The operation to check access for, defaults to 'view'
 * @param $space
 *   The space to check access against. If not provided the current space
 *   will be used.
 */
function spaces_dashboard_access($dashboard = NULL, $type = NULL, $op = 'view', $space = NULL) {
  $custom = variable_get('spaces_dashboard_custom', array('custom-1' => t('Dashboard')));
  // Make sure the requested dashboard exists.
  if (empty($custom[$dashboard]) && $dashboard !== 'custom-1') {
    return FALSE;
  }

  if (empty($space)) {
    $space = spaces_get_space();
  }

  switch ($type) {
    case 'user':
      if ($space && $space->type === 'user') {
        // This check ensures that only the user that the dashboard belongs
        // to (and admins) can view and edit the user's dashboard.
        return spaces_access_admin(NULL, $space) && spaces_access_feature($op, 'spaces_dashboard');
      }
      return FALSE;
    default:
      // When the dashboard is turned on for a different space type and the
      // user space is active do a separate access check for the dashboard.
      if ($space && $space->type === 'user') {
        if ($features = $space->controllers->variable->get('spaces_features', 'original')) {
          return user_access('access content') && !empty($features['spaces_dashboard']);
        }
        return FALSE;
      }
      return spaces_access_feature($op, 'spaces_dashboard');
  }
}

/**
 * Access callback for the user Dashboard.
 */
function spaces_dashboard_user_access($user, $dashboard = NULL) {
  $space = spaces_load('user', $user->uid);
  return spaces_dashboard_access($dashboard, 'user', 'view', $space);
}

/**
 * Empty page callback for dashboard feature.
 */
function spaces_dashboard_page($dashboard = NULL) {
  if (isset($dashboard)) {
    $context = context_load("spaces_dashboard-{$dashboard}");
    if (!$context) {
      $context = ctools_export_new_object('context');
      $context->name = "spaces_dashboard-{$dashboard}";
      $context->description = 'Dashboard';
      $context->tag = 'Dashboard';
      context_save($context);
    }
    context_set('spaces', 'dashboard', "spaces_dashboard-{$dashboard}");
    context_set('context', "spaces_dashboard-{$dashboard}", $context);
  }
  return '';
}

/**
 * Preprocessor for theme('context_block_editable_region').
 * Only allow regions that have been set to editable to be changed.
 */
function spaces_dashboard_preprocess_context_block_editable_region(&$vars) {
  if (module_exists('context_layouts') && context_isset('context', 'spaces_dashboard')) {
    $layout = context_layouts_get_active_layout(FALSE);
    $regions = variable_get('spaces_dashboard_regions', array());
    if (!empty($regions[$layout])) {
      $vars['editable'] = !empty($regions[$layout][$vars['region']]);
    }
  }
}

/**
 * Implementation of hook_block().
 */
function spaces_dashboard_block($op, $delta = null) {
  if ($op == 'list') {
    return array('editor' => array('info' => t('Dashboard'), 'admin' => true));
  }
  elseif ($op == 'view' && $delta == 'editor') {
    // Ensure that the dashboard editor does not appear on the same page as
    // the context editor. The two will collide.
    $editor = FALSE;
    if (module_exists('admin') && function_exists('admin_get_settings')) {
      $blocks = admin_get_settings('blocks');
      $editor = user_access('administer site configuration') && !empty($blocks['context_ui-editor']);
    }
    $context = context_get('spaces', 'dashboard') ? context_get('context', context_get('spaces', 'dashboard')) : FALSE;
    if (!$editor && spaces_access_admin() && $context) {
      return array(
        'subject' => t('Dashboard'),
        'content' => drupal_get_form('context_ui_editor', array($context)),
      );
    }
  }
}

/**
 * Implementation of hook_form_alter() for context_ui_editor.
 */
function spaces_dashboard_form_context_ui_editor_alter(&$form, $form_state) {
  $context = context_get('spaces', 'dashboard');
  if ($context) {
    unset($form['contexts'][$context]['#type']);
    // Hide conditions.
    $form['contexts'][$context]['condition']['#access'] = FALSE;
    // Hide reactions other than blocks.
    foreach (array_keys(context_reactions(TRUE)) as $reaction) {
      if ($reaction !== 'block' && isset($form['contexts'][$context]["reaction-{$reaction}"])) {
        $form['contexts'][$context]["reaction-{$reaction}"]['#access'] = FALSE;
      }
    }
    // Alter allowed layouts
    if (module_exists('context_layouts')) {
      $layouts = variable_get('spaces_dashboard_layouts', array());
      if (!empty($layouts) && isset($form['contexts'][$context]['reaction-block']['layout'])) {
        $layouts = array_filter($layouts);
        $layouts[0] = 1;
        $form['contexts'][$context]['reaction-block']['layout']['layout']['#options'] = array_intersect_key($form['contexts'][$context]['reaction-block']['layout']['layout']['#options'], $layouts);
      }
    }
  }
  return $form;
}

/**
 * Preprocessor for theme('context_block_browser').
 */
function spaces_dashboard_preprocess_context_block_browser(&$vars) {
  if (spaces_access_admin() && $vars['context']->name == context_get('spaces', 'dashboard')) {
    foreach ($vars['blocks'] as $category => $blocks) {
      foreach ($blocks as $bid => $block) {
        // Recategorize blocks by feature.
        if (spaces_dashboard_block_access($block)) {
          $block_module = spaces_dashboard_get_module($block);
          if ($block_module != $category) {
            if (!isset($vars['categories']['#options'][$block_module])) {
              $info = context_get_info('module', $block_module);
              $vars['categories']['#options'][$block_module] = isset($info['name']) ? $info['name'] : $block_module;
            }
            unset($vars['blocks'][$category][$bid]);
            $vars['blocks'][$block_module][$bid] = $block;
          }
        }
        // Remove any blocks not enabled for this space type.
        else {
          unset($vars['blocks'][$category][$bid]);
        }
      }
    }
    // Remove empty categories.
    foreach ($vars['categories']['#options'] as $k => $v) {
      if ($k != '0' && empty($vars['blocks'][$k])) {
        unset($vars['categories']['#options'][$k]);
      }
    }
    // Sort
    asort($vars['categories']['#options']);
  }
}

/**
 * Retrieve the module that a block conceptually belongs to.
 * Will detect the feature that provides block X as a default block
 * if using Views, Panels or other block-providing modules.
 */
function spaces_dashboard_get_module($block) {
  $map = spaces_features_map();
  switch ($block->module) {
    case 'views':
      $delta = $block->delta;
      // if this is 32, this should be an md5 hash.
      if (strlen($delta) == 32) {
        $hashes = variable_get('views_block_hashes', array());
        if (!empty($hashes[$delta])) {
          $delta = $hashes[$delta];
        }
      }
      list($name, $display_id) = explode('-', $delta);
      return isset($map['views'][$name]) ? $map['views'][$name] : 'views';
    case 'panels_mini':
      return isset($map['panels_mini'][$block->delta]) ? $map['panels_mini'][$block->delta] : 'panels_mini';
    default:
      return $block->module;
  }
}

/**
 * Determine whether this block is accessible for use with the dashboard.
 * Modules should implement hook_spaces_dashboard_block_access_alter()
 * if they would like to implement more complex rules for dashboard block
 * access.
 *
 * @param $block
 *   A block object with at least the ->module & ->delta properties.
 *
 * @return
 *   TRUE if the block may be used. FALSE otherwise.
 */
function spaces_dashboard_block_access($block, $reset = FALSE) {
  static $access;
  if ((!isset($access) || $reset) && $plugin = context_get_plugin('reaction', 'block')) {
    $blocks = $plugin->get_blocks();
    $access = array_fill_keys(array_keys($blocks), 0);
    $access = array_merge($access, variable_get('spaces_dashboard_blocks', array()));
    drupal_alter('spaces_dashboard_block_access', $access);
  }
  return isset($access[$block->bid]) ? (bool) $access[$block->bid] : FALSE;
}

/**
 * Implementation of hook_spaces_dashboard_block_access_alter() on behalf of Views.
 */
function views_spaces_dashboard_block_access_alter(&$access) {
  foreach ($access as $bid => $allowed) {
    list($module, $delta) = explode('-', $bid, 2);
    if ($module === 'views') {
      // if this is 32, this should be an md5 hash.
      if (strlen($delta) == 32) {
        $hashes = variable_get('views_block_hashes', array());
        if (!empty($hashes[$delta])) {
          $delta = $hashes[$delta];
        }
      }
      // Ensure that this Views delta is well-formed.
      if (strpos($delta, '-') !== FALSE) {
        // Special Views blocks
        if (substr($delta, 0, 1) == '-') {
          list($nothing, $type, $name, $display_id) = explode('-', $delta);
        }
        // Normal Views blocks
        else {
          list($name, $display_id) = explode('-', $delta);
        }
        // Load the view
        if ($view = views_get_view($name)) {
          $access[$bid] = $allowed && $view->access($display_id);
          $view->destroy();
        }
      }
    }
  }
}
