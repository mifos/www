<?php

include_once('atrium_shoutbox.features.inc');

/**
 * Implementation of hook_help().
 */
function atrium_shoutbox_help($path, $arg) {
  if (($path == 'help#atrium_shoutbox') || context_isset('context', 'spaces-shoutbox-og')) {
    $help = '';
    $help .= '<h3>'. t('Shoutbox') .'</h3>';
    $help .= '<p>'. t('The shoutbox gives your team a space to microblog.') .'</p>';
    $help .= '<ul>';
    $help .= '<li>'. t('Shouts can be used to tell others what you\'re up to, link to websites of interest, or cover other random stuff that comes up during the day.') .'</li>';
    $help .= '<li>'. t('<strong>Keep your shouts short</strong> and to the point. If a shout starts getting long, consider using a blog post or document to capture your thoughts.') .'</li>';
    $help .= '<li>'. t('<strong>URLs</strong> will automatically be linked in your posts.') .'</li>';
    $help .= '</ul>';
    return $help;
  }
}

/**
 * Implementation of hook_menu()
 */
function atrium_shoutbox_menu() {
  $items = array();
  $items['shoutbox'] = array(
    'title' => 'Shoutbox',
    'title callback' => 'atrium_shoutbox_title',
    'page callback' => 'atrium_shoutbox_page',
    'access callback' => 'spaces_access_feature',
    'access arguments' => array('view', 'atrium_shoutbox'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'features',
    'options' => array(
      'fragment' => 'block-atrium_shoutbox-shoutbox',
      'attributes' => array(
        'id' => 'atrium-shoutbox-launcher',
        'class' => 'palette-toggle'
      ),
    ),
  );
  return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
function atrium_shoutbox_menu_alter(&$items) {
  // Remove shoutbox node add page.
  if (isset($items['node/add/shoutbox'])) {
    unset($items['node/add/shoutbox']);
  }
}

/**
 * Shoutbox menu item title callback.
 */
function atrium_shoutbox_title($title) {
  $title = t($title);
  if (($shoutbox = atrium_shoutbox_get_shoutbox()) && !empty($shoutbox['count'])) {
    $title .= " ({$shoutbox['count']})";
  }
  return $title;
}

/**
 * Implementation of hook_block()
 */
function atrium_shoutbox_block($op = 'list', $delta = 0) {
  switch ($op) {
    case 'list':
      return array('shoutbox' => array('info' =>  t('Shoutbox')));
    case 'view':
      if ($delta == 'shoutbox' && spaces_access_feature('view', 'atrium_shoutbox') && !context_isset('context', 'spaces-shoutbox-og')) {
        if ($shoutbox = atrium_shoutbox_get_shoutbox()) {
          if (($space = spaces_get_space()) && $space->type === 'og') {
            $link = l(t('Full view'), 'shoutbox');
            $output = drupal_get_form('messaging_shoutbox_shoutform', $shoutbox['node'], $shoutbox['view']->name, 'default', $shoutbox['rendered']);
            $output .= "<div class='more-link'>$link</div>";
            return array('subject' => filter_xss_admin($space->group->title), 'content' => $output);
          }
          else {
            return array('subject' => t('Shoutbox'), 'content' => $shoutbox['rendered']);
          }
        }
      }
      break;
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function atrium_shoutbox_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'view':
      if ($node->type == 'shoutbox') {
        $node->content = array('shoutbox' => array('#value' => atrium_shoutbox_page()));
      }
      break;
  }
}

/**
 * Implementation of hook_context_links_alter().
 */
function atrium_shoutbox_context_links_alter(&$links) {
  // Yank out button for creating new shoutbox
  if (isset($links['shoutbox'])) {
    unset($links['shoutbox']);
  }
}

/**
 * Page callback for spaces shoutbox feature.
 */
function atrium_shoutbox_page() {
  $shoutbox = atrium_shoutbox_get_shoutbox();
  if ($shoutbox && $shoutbox['node']) {
    $rendered = views_embed_view('atrium_shoutbox_shouts', 'page_1', array($node->nid));
    return drupal_get_form('messaging_shoutbox_shoutform', $shoutbox['node'], 'atrium_shoutbox_shouts', 'page_1', $rendered);
  }
  return $shoutbox ? $shoutbox['rendered'] : '';
}

/**
 * Generate the shoutbox for the current space and/or situation along with user
 * unread count calculations. This behaves as a singleton for the page load so
 * that it can be used at several points (menu title callback, block, etc.).
 */
function atrium_shoutbox_get_shoutbox($reset = FALSE) {
  // Admin killswitch.
  if (arg(0) === 'admin') {
    return FALSE;
  }

  static $shoutbox;
  if (!isset($shoutbox) || $reset) {
    // Add shoutbox js and current server timestamp. Note that we don't
    // use the client side timestamp (via JS) because the cookie timestamp
    // is compared with shout times. We avoid bad client clocks and
    // inconsistencies using this method.
    drupal_add_js(drupal_get_path('module', 'admin') . '/includes/jquery.cookie.js');
    drupal_add_js(drupal_get_path('module', 'atrium_shoutbox') . '/atrium_shoutbox.js');
    drupal_add_js(array('atrium_shoutbox' => array('timestamp' => time())), 'setting');

    $shoutbox = array();
    $space = spaces_get_space();
    if ($space->type === 'og') {
      if ($view = views_get_view('atrium_shoutbox')) {
        $view->set_display('default');
        $view->execute();
        if (is_array($view->result) && count($view->result)) {
          $node = node_load($view->result[0]->nid);
        }
        else {
          $node = (object) array(
            'title' => $space->group->title,
            'body' => '',
            'name' => $space->group->name,
            'type' => 'shoutbox',
          );
          node_save($node);
        }
        // Get the view and pass it to the form, as we will want access to the
        // raw view resultset ourselves.
        if (node_access('view', $node) && $view = views_get_view('atrium_shoutbox_shouts')) {
          $shoutbox['node'] = $node;
          $shoutbox['view'] = $view;
          $shoutbox['rendered'] = $view->execute_display('default', array($node->nid));
        }
      }
    }
    else {
      $view = views_get_view('atrium_shoutbox_shouts');
      $shoutbox['node'] = FALSE;
      $shoutbox['view'] = $view;
      $shoutbox['rendered'] = $view->execute_display('default');
    }

    // Gather count of unread shouts for the current user..
    if (!empty($shoutbox)) {
      global $user;
      $shoutbox['count'] = 0;
      if (!empty($shoutbox['view']->result) && !empty($_REQUEST['AtriumShoutbox'])) {
        $user_last_viewed = $_REQUEST['AtriumShoutbox'];
        foreach ($shoutbox['view']->result as $row) {
          // Only tally shouts that occurred after this user's last view.
          // The user's shouts don't count.
          if (
            isset($row->comments_timestamp, $row->comments_uid) &&
            $row->comments_timestamp >= $user_last_viewed &&
            $row->comments_uid !== $user->uid
          ) {
            $shoutbox['count']++;
          }
        }
      }
    }
  }
  return $shoutbox;
}
